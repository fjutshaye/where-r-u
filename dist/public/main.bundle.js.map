{"version":3,"sources":["/home/jeremy/git-repositories/where-r-u/client/$_lazy_route_resource lazy","/home/jeremy/git-repositories/where-r-u/client/app/app.component.css","/home/jeremy/git-repositories/where-r-u/client/app/app.component.html","/home/jeremy/git-repositories/where-r-u/client/app/app.component.ts","/home/jeremy/git-repositories/where-r-u/client/app/app.module.ts","/home/jeremy/git-repositories/where-r-u/client/app/components/mainframe/mainframe.component.css","/home/jeremy/git-repositories/where-r-u/client/app/components/mainframe/mainframe.component.html","/home/jeremy/git-repositories/where-r-u/client/app/components/mainframe/mainframe.component.ts","/home/jeremy/git-repositories/where-r-u/client/app/services/record/record.service.ts","/home/jeremy/git-repositories/where-r-u/client/environments/environment.ts","/home/jeremy/git-repositories/where-r-u/client/main.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"../../../../../client/$$_lazy_route_resource lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/jeremy/git-repositories/where-r-u/client/$$_lazy_route_resource lazy\n// module id = ../../../../../client/$$_lazy_route_resource lazy recursive\n// module chunks = main","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/jeremy/git-repositories/where-r-u/client/app/app.component.css\n// module id = ../../../../../client/app/app.component.css\n// module chunks = main","module.exports = \"\\n<app-mainframe></app-mainframe>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/jeremy/git-repositories/where-r-u/client/app/app.component.html\n// module id = ../../../../../client/app/app.component.html\n// module chunks = main","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  \n}\n\n\n\n// WEBPACK FOOTER //\n// /home/jeremy/git-repositories/where-r-u/client/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { MainframeComponent } from './components/mainframe/mainframe.component';\nimport { RecordService } from './services/record/record.service';\n\nimport { AccordionModule } from 'ngx-bootstrap';\nimport { AlertModule } from 'ngx-bootstrap';\nimport { AgmCoreModule } from '@agm/core';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MainframeComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    AccordionModule.forRoot(),\n    AlertModule.forRoot(),\n    AgmCoreModule.forRoot({\n      apiKey: 'AIzaSyA-omf-NNlEj7dtnlRVzBANGzN637E1Goc'\n    })\n  ],\n  providers: [RecordService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// /home/jeremy/git-repositories/where-r-u/client/app/app.module.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"agm-map {\\n    height: 30rem;\\n}\\n.container-fluid {\\n    margin-top: 5rem;\\n}\\n.row {\\n    padding-bottom: 1rem;\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/jeremy/git-repositories/where-r-u/client/app/components/mainframe/mainframe.component.css\n// module id = ../../../../../client/app/components/mainframe/mainframe.component.css\n// module chunks = main","module.exports = \"<!-- <button class=\\\"btn btn-danger\\\" (click)=\\\"temp_postFgeo()\\\">Test Post Record</button> -->\\n\\n<div class=\\\"container-fluid\\\">\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-md-9\\\">\\n            <!-- GOOGLE MAP AREA !!! -->\\n            <!-- this creates a google map on the page with the given lat/lng from -->\\n            <!-- the component as the initial center of the map: -->\\n            <agm-map [latitude]=\\\"40\\\" [longitude]=\\\"-30\\\" [zoom]=\\\"3\\\" [minZoom]=\\\"3\\\">\\n                <agm-marker *ngFor=\\\"let record of records_groupby_ip\\\"\\n                 [latitude]=\\\"record._id.latitude\\\" [longitude]=\\\"record._id.longitude\\\">\\n                </agm-marker>\\n            </agm-map>\\n        </div>\\n        <div class=\\\"col-md-3\\\">\\n            <accordion *ngFor=\\\"let record of records_groupby_ip\\\">\\n                <accordion-group>\\n                    <div accordion-heading class=\\\"clearfix\\\">\\n                        {{record._id.ip}}\\n                    </div>\\n                    <ul class=\\\"nav flex-column\\\">\\n                        <li>Longitude: {{record._id.longitude}}</li>\\n                        <li>Latitude: {{record._id.latitude}}</li>\\n                        <li>City: {{record._id.city}}</li>\\n                        <li>Region: {{record._id.region_name}}</li>\\n                        <li>Country: {{record._id.country_name}}</li>\\n                        <li>Total Visit: {{record.count}}</li>\\n                    </ul>\\n                </accordion-group>\\n            </accordion>\\n        </div>\\n    </div>\\n    <div class=\\\"row justify-content-center\\\">\\n        <button class=\\\"btn btn-primary\\\" (click)=\\\"postIp()\\\">Leave a Marker</button>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <alert class=\\\"col-12\\\" type=\\\"warning\\\" *ngFor=\\\"let message of messages\\\">\\n            {{message}}\\n        </alert>\\n    </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/jeremy/git-repositories/where-r-u/client/app/components/mainframe/mainframe.component.html\n// module id = ../../../../../client/app/components/mainframe/mainframe.component.html\n// module chunks = main","import { Component, OnInit } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Subscription } from 'rxjs/Subscription';\nimport { RecordService } from '../../services/record/record.service';\nimport { IRGI } from '../../models/record.model';\n\n@Component({\n  selector: 'app-mainframe',\n  templateUrl: './mainframe.component.html',\n  styleUrls: ['./mainframe.component.css']\n})\nexport class MainframeComponent implements OnInit {\n\n  subscription: Subscription[];\n  records_groupby_ip: IRGI[];\n  messages: string[];\n\n  constructor(\n    private httpClient: HttpClient,\n    private recordService: RecordService\n  ) { \n    this.subscription = new Array<Subscription>();\n    this.subscribeRecordsByIp();\n    this.messages = [];\n  }\n\n  ngOnInit() {\n  }\n\n  async postIp() {\n    this.messages = [];\n    console.log('sending ip');\n    await this.httpClient.post('/api/ipgeo', {}).subscribe(data=> {\n      console.log(data);\n      if(data['statusCode'] != 200) {\n        // display error message\n        this.messages.push(data['statusMessage']);\n      }\n    });\n    this.recordService.updateRecordsByIp();\n  }\n\n  subscribeRecordsByIp() {\n    this.subscription.push(\n      this.recordService.records_groupby_ip.subscribe(\n        records => {\n          this.records_groupby_ip = records;\n        }\n      )\n    )\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// /home/jeremy/git-repositories/where-r-u/client/app/components/mainframe/mainframe.component.ts","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { ISpot, IRGI } from '../../models/record.model';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Injectable()\nexport class RecordService {\n\n  constructor(\n    private httpClient: HttpClient\n  ) { \n    this.records_groupby_ip$ = new Subject<IRGI[]>();\n    this.records_groupby_ip = this.records_groupby_ip$.asObservable();\n    this.updateRecordsByIp();\n  }\n\n  records_groupby_ip$: Subject<IRGI[]>;\n  records_groupby_ip: Observable<IRGI[]>;\n\n  // GET Records from server\n  public updateRecordsByIp() {\n    this.httpClient.get('/api/records/ip').subscribe(\n      records => {\n        let irgi: IRGI[];\n        irgi = records['records'];\n        this.records_groupby_ip$.next(irgi);;\n      }\n    );\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// /home/jeremy/git-repositories/where-r-u/client/app/services/record/record.service.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// /home/jeremy/git-repositories/where-r-u/client/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n\n\n// WEBPACK FOOTER //\n// /home/jeremy/git-repositories/where-r-u/client/main.ts"],"sourceRoot":"webpack:///"}